[gd_scene load_steps=8 format=3 uid="uid://cd6lipl7sm2jy"]

[ext_resource type="Shader" path="res://Ressources/Shaders/CeilShading/outline-forest.gdshader" id="1_x1mdo"]
[ext_resource type="Shader" path="res://Ressources/Shaders/CeilShading/cel-shader-base-no-alpha.gdshader" id="2_1b8xh"]

[sub_resource type="ShaderMaterial" id="ShaderMaterial_j2eqy"]
render_priority = 0
shader = ExtResource("1_x1mdo")
shader_parameter/forestType = null

[sub_resource type="ShaderMaterial" id="ShaderMaterial_y5qfj"]
render_priority = 0
next_pass = SubResource("ShaderMaterial_j2eqy")
shader = ExtResource("2_1b8xh")
shader_parameter/metallic = 0.0
shader_parameter/roughness = 1.0
shader_parameter/color = Color(0.159735, 0.588745, 1, 1)
shader_parameter/specular = Color(0.3, 0.3, 0.3, 0.5)
shader_parameter/fresnel = Color(0.2, 0.2, 0.2, 0.3)
shader_parameter/uv_scale = Vector2(1, 1)
shader_parameter/uv_offset = Vector2(0, 0)

[sub_resource type="SphereMesh" id="SphereMesh_el041"]
material = SubResource("ShaderMaterial_y5qfj")

[sub_resource type="Shader" id="Shader_2h385"]
code = "shader_type spatial;

void vertex() {
	float c = cos(TIME + VERTEX.x + VERTEX.y + VERTEX.z) * 0.5;
	VERTEX += vec3(c, sin(c), -c);
}

void fragment() {
	float g = max(0.0, sin(TIME + UV.y)) * 0.25;
	ALBEDO = vec3(g);
}

//void light() {
	// Called for every pixel for every light affecting the material.
	// Uncomment to replace the default light processing function with this one.
//}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_gdsx7"]
render_priority = 0
shader = SubResource("Shader_2h385")

[node name="CloakMesh" type="MeshInstance3D"]
transform = Transform3D(0.165, 0, 0, 0, 0.165, 0, 0, 0, 0.165, 0, 0, 0)
mesh = SubResource("SphereMesh_el041")
surface_material_override/0 = SubResource("ShaderMaterial_gdsx7")
